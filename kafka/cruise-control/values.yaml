#【----------------全局变量--------------------】
global:
  # 镜像
  image:
    # 镜像仓库名称
    repository_name: reg.qloudhub.com

#【----------------镜像配置--------------------】
# 镜像
image:
  # 镜像名称
  repository: qloudpaas/cruise-control
  # 拉取镜像策略
  pullPolicy: IfNotPresent

#容器启动命令和参数
containers:
#  command: |-
#           bash docker-entrypoint.sh
  command: {}
  args: {}

#【----------------服务配置--------------------】

service:
  enabled: true
  # 服务映射端口类型ClusterIP、NodePort
  type: NodePort
  # 服务
  annotations:
    # 服务名
    name: cruisecontrol

  ports:
    # 容器内端口
    - port: 9090
      targetPort: 9090

#【----------------部署配置--------------------】

deployment:
  # 部署实例个数
  replicas: 1
  ports:
  # 容器内端口,protocol协议不写，默认TCP
  - containerPort: 9090
  #- containerPort: 7777
    #protocol: UDP

#【----------------环境变量--------------------】
#当env的某个环境变量需要加密处理时，需要在下面的envsecret配置，不用再env中配置了
env: {}

#【----------------secret配置--------------------】
#1、目前只支持生成一个secret
envsecret:
  #是否使用secret，false为不使用,envname为环境变量名字
  enabled: false

#【----------------持久卷--------------------】 

#  Persistent Volume Storage Class
#1、pvc配置,主要配置pv的名称（和创建的pv名字相同）
#2、pvc名字自动生成，为服务名-claim
persistence:
  #是否已经存在pvc，存在则不创建,configMap不需要生成pvc
  existingClaim: false
  #是否使用持久卷，false为不使用
  enabled: true
  # annotations:
  #   volume.beta.kubernetes.io/storage-class: rook-ceph-block
  #   volume.beta.kubernetes.io/storage-provisioner: flexvolume-huawei.com/fuxivol
  # labels:
  #   failure-domain.beta.kubernetes.io/region: cn-north-1
  #   failure-domain.beta.kubernetes.io/zone: cn-north-1a
    
#挂载卷时需要配置，mountPath为pod容器中的目录,type为存储类型：secret、gluster、configMap
#1、注意此处如果type是configMap，配置的name名字要和下方的configMap一样
#2、增加items代表一个configMap对应对个配置文件并且可以设置权限，如果不需要可以不加此项
volumeMounts:
- name: config
  mountPath: /opt/cruise-control/config/cruisecontrol.properties 
  subPath: cruisecontrol.properties

volume:
- name: config
  type: configMap
  items:
  - key: cruisecontrol.properties
    path: cruisecontrol.properties
    mode: 0644

#【----------------暴露http服务的方式:ingress----在service 之前加了一层ingress----------------】 
ingress:
  enabled: true
  addns: true
#ingress对应的端口
  hosts: 
  - host: cruisecontrol
    domain: service.sd
    paths:
    - path:
      servicePort: 9090

#【-----------------请求资源限制-------------------】
resources:
  requests:
    cpu: 0.5
    memory: 512Mi
  limits:
    cpu: 1
    memory: 1Gi


nodeSelector: {}

#【-----------------初始化容器-------------------】
#此服务是否需要依赖其他服务,如果是的话，需要配置enabled:true,且需要配置image、command：command为相应的等待命令,image为init容器镜像
initContainers:
  enabled: false
  # image: "qloudpaas/alpine-curl-jq:1.0.0"
  # command: "until (nc -w 3 qloudredis:6379 -z) ;do sleep 3; done"
#【-----------------新增install-shell容器-------------------】
#使用时直接设置enabled=true即可，其他不需要配置
initInstallContainers:
  enabled: false
  #image: "qloudpaas/alpine-curl-jq:1.0.0"
  #【----------------configMap配置--------------------】 
#1、支持生成多个configMap
configMap:
  #是否使用configMap，false为不使用
  enabled: true
  list:
    - name: config
      items:
      - key: cruisecontrol.properties
        fileName: config/cruisecontrol.properties
#【----------------在容器中添加主机ip和名字的映射--------------------】
hostAliases:
  enabled: false

#【-----------------健康检查 K8S提供livenessProbe来检测应用程序是否正常运行，并且对相应状况进行相应的补救措施-------------------】
livenessProbe:
  enabled: false
#在没有配置readinessProbe的资源对象中，pod中的容器启动完成后，就认为pod中的应用程序可以对外提供服务，有时一些应用程序启动后，需要较长时间的加载才能对外服务
readinessProbe:
  enabled: false
