#【----------------全局变量--------------------】
global:
  #  # 镜像仓库名称
  imageRepositoryName: reg.qloudhub.com

#【----------------镜像配置--------------------】
# 镜像
imageRepository: qloudpaas/kafka-manager
  #版本要求3位数,不写默认从.Chart.appVersion拿
imageTag: 2.0.0
  # 拉取镜像策略
imagePullPolicy: IfNotPresent

#容器启动命令和参数
# containersCommand: {}
# containersArgs: {}

#【----------------服务配置--------------------】
#是否启动服务
serviceEnabled: true
  # 服务映射端口类型ClusterIP、NodePort
serviceType: ClusterIP
  # 服务
serviceName: kafkamanager
servicePorts:
# 容器内端口
 - port: 9000

#【----------------部署配置--------------------】
# 部署实例个数
deploymentReplicas: 1
deploymentPorts:
# 容器内端口,protocol协议不写，默认TCP
- containerPort: 9000

#【----------------环境变量--------------------】
#当env的某个环境变量需要加密处理时，需要在下面的envsecret配置，不用再env中配置了

#通用环境变量，key=SERVICE_CLUSTER,value由服务名+命名空间组成
env:
  ZK_HOSTS: "qloudzookeeper:2181"


#envcommon: SERVICE_CLUSTER

#【----------------secret配置--------------------】
#1、目前只支持生成一个secret

  #是否使用secret，false为不使用,envname为环境变量名字
envsecretEnabled: false

#【----------------设置容器是否运行在特权模式--------------------】
#仅应用到指定的容器
securityContext: false

#【----------------持久卷--------------------】
#  Persistent Volume Storage Class
#1、pvc配置,主要配置pv的名称（和创建的pv名字相同）
#2、pvc名字自动生成，为服务名-name
#是否已经存在pvc，存在则不创建,configMap不需要生成pvc
persistenceExistingClaim: true
  #是否使用持久卷，false为不使用
persistenceEnabled: true
# persistenceAnnotations:
#   volume.beta.kubernetes.io/storage-class: ssd
#   volume.beta.kubernetes.io/storage-provisioner: flexvolume-huawei.com/fuxivol
# persistenceLabels:
#   failure-domain.beta.kubernetes.io/region: cn-north-1
#   failure-domain.beta.kubernetes.io/zone: cn-north-1a
    
#挂载卷时需要配置，mountPath为pod容器中的目录,type为存储类型：secret、gluster、configMap
#1、注意此处如果type是configMap，配置的name名字要和下方的configMap一样
#2、增加items代表一个configMap对应对个配置文件并且可以设置权限，如果不需要可以不加此项
volumeMounts:
- name: config
  mountPath: /opt/kafka-manager/conf/application.conf
  subPath: application.conf
- name: config
  mountPath: /opt/kafka-manager/conf/consumer.properties
  subPath: consumer.properties

volume:
- name: config
  type: configMap
  items:
  - key: application.conf
    path: application.conf
    mode: "0644"
  - key: consumer.properties
    path: consumer.properties
    mode: "0644"

#【----------------暴露http服务的方式:ingress----在service 之前加了一层ingress----------------】 
ingressEnabled: true
ingressAddns: true
#ingress对应的端口
ingressHosts:
- host: kafkamanager
  domain: service.sd
  paths:
  - path:
    servicePort: 9000

#【-----------------请求资源限制-------------------】
resourcesRequestsCpu: 0.5
resourcesRequestsMemory: 1Gi
resourcesLimitsCpu: 1
resourcesLimitsMemory: 2Gi

nodeSelector: {}

#【-----------------初始化容器-------------------】
#此服务是否需要依赖其他服务,如果是的话，需要配置enabled:true,且需要配置image、command：command为相应的等待命令,image为init容器镜像
#默认等待同一命名空间的服务
initContainersEnabled: false
#initContainersImage: "qloudpaas/alpine-curl-jq:1.0.0"
#initContainersCommand: "until (nc -w 3 qloudkafka:9092 -z) ;do sleep 120; done"

#【-----------------新增install-shell容器-------------------】
#使用时直接设置enabled=true即可，其他不需要配置
initInstallContainersEnabled: false
initInstallContainersImage: "qloudpaas/alpine-curl-jq:1.0.0"
#【----------------configMap配置--------------------】
#1、支持生成多个configMap
  #是否使用configMap，false为不使用
configMapEnabled: true
configMapList:
#name不需要填写服务名，chart自动生成服务名-name值
- name: config
  items:
  - key: application.conf
    fileName: config/application.conf
  - key: consumer.properties
    fileName: config/consumer.properties


#【----------------在容器中添加主机ip和名字的映射--------------------】
hostAliasesEnabled: false

#【-----------------健康检查 K8S提供livenessProbe来检测应用程序是否正常运行，并且对相应状况进行相应的补救措施-------------------】
#此处保留原来的样式，易读性更佳
livenessProbe:
  enabled: false
#在没有配置readinessProbe的资源对象中，pod中的容器启动完成后，就认为pod中的应用程序可以对外提供服务，有时一些应用程序启动后，需要较长时间的加载才能对外服务
readinessProbe:
  enabled: false
