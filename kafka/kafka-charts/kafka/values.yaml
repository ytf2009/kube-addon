#【----------------全局变量--------------------】
global:
  # 镜像
  image:
    # 镜像仓库名称
    repository_name: reg.qloudhub.com

#【----------------镜像配置--------------------】
# 镜像
image:
  # 镜像名称
  repository: qloudpaas/kafka-cc
  # 拉取镜像策略
  pullPolicy: IfNotPresent

#容器启动命令和参数
containers:
  command: {}
  args: false 

#【----------------服务配置--------------------】

service:
  # 是否为headless,true表示是，false表示不是
  headless: true
  # 服务映射端口类型ClusterIP、NodePort
  type: ClusterIP
  # 服务
  annotations:
    # 服务名
    name: qloudkafka
  ports:
    # 容器内端口
    - port: 9092

#【----------------部署配置--------------------】

statefulset:
  # 部署实例个数
  replicas: 3
  ports:
  # 容器内端口,protocol协议不写，默认TCP
  - containerPort: 9092
    #protocol: UDP

#【----------------kafka配置项--------------------】
kafkaConfig:
  # zookeeper info,以逗号分隔
  zks: "qloudzookeeper:2181"
  # 服务启动的端口
  port: 9092

#【----------------环境变量--------------------】
#当env的某个环境变量需要加密处理时，需要在下面的envsecret配置，不用再env中配置了
env: 
- name: ZOOKEEPER_CONNECT
  value: "qloudzookeeper:2181"
- name: ADVERTISED_LISTENERS
  value: "qloudkafka"
- name: JMX_PORT
  value: 9988
- name: KAFKA_HEAP_OPTS
  value: "-Xmx5G -Xms5G"

#【----------------secret配置--------------------】
#1、目前只支持生成一个secret
envsecret:
  #是否使用secret，false为不使用,envname为环境变量名字
  enabled: false
  #data:
  #- key: CONSUL_TOKEN
  #  value: c82580da-896b-8b8c-0082-2841bbbc6596
  #  envname: CONSUL_TOKEN

#【----------------持久卷--------------------】 

#  Persistent Volume Storage Class
#1、pvc配置,主要配置pv的名称（和创建的pv名字相同）
#2、pvc名字自动生成，为服务名-claim
persistence:
  #是否已经存在pvc，存在则不创建
  existingClaim: false
  #是否使用持久卷，false为不使用
  enabled: true
  size: 20Gi
  #label通用配置
  #labels:
  #  failure-domain.beta.kubernetes.io/region: cn-north-1
  #  failure-domain.beta.kubernetes.io/zone: cn-north-1a
  #annotations:
  #  volume.beta.kubernetes.io/storage-class: sas
  #  volume.beta.kubernetes.io/storage-provisioner: flexvolume-huawei.com/fuxivol
    
#挂载卷时需要配置，mountPath为pod容器中的目录，volumes的名字和volumeMounts的名字一样,type为存储类型：secret、gluster、configMap
volumeMounts:
- name: data
#  type: gluster
  mountPath: /tmp/kafka-logs

#【----------------暴露http服务的方式:ingress----在service 之前加了一层ingress----------------】 
ingress:
  enabled: false


#【-----------------请求资源限制-------------------】
resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
     memory: 1Gi
     cpu: 1  

#【-----------------初始化容器-------------------】
#此服务是否需要依赖其他服务,如果是的话，需要配置enabled:true,且需要配置image、command：command为相应的等待命令,image为init容器镜像
initContainers:
  enabled: false
  image: "qloudpaas/alpine-curl-jq:1.0.0"
  command: "until nc -w 3 qloudzookeeper:2181 -z ;do sleep 3; done"


  #【----------------configMap配置--------------------】 
#1、目前只支持生成一个configMap
configMap:
  #是否使用configMap，false为不使用
  enabled: false
  #key: my.cnf
  #data: |-


#【----------------在容器中添加主机ip和名字的映射--------------------】
hostAliases:
  enabled: false

#【-----------------健康检查 K8S提供livenessProbe来检测应用程序是否正常运行，并且对相应状况进行相应的补救措施-------------------】
livenessProbe:
  enabled: false

#在没有配置readinessProbe的资源对象中，pod中的容器启动完成后，就认为pod中的应用程序可以对外提供服务，有时一些应用程序启动后，需要较长时间的加载才能对外服务
readinessProbe:
  enabled: false

