apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
  namespace: paas
apiVersion: v1
data:
  init.sh: |-
    #!/bin/bash
    set -x

    [ -z "$ID_OFFSET" ] && ID_OFFSET=1
    export ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))
    echo "${ZOOKEEPER_SERVER_ID:-1}" | tee /var/lib/zookeeper/data/myid
    cp -Lur /etc/kafka-configmap/* /conf/
    sed -i "s/server\.$ZOOKEEPER_SERVER_ID\=[a-z0-9.-]*/server.$ZOOKEEPER_SERVER_ID=0.0.0.0/" /conf/zookeeper.properties
    cp /conf/zookeeper.properties /conf/zoo.cfg

  zookeeper.properties: |-
    tickTime=2000
    dataDir=/var/lib/zookeeper/data
    dataLogDir=/var/lib/zookeeper/log
    clientPort=2181
    initLimit=5
    syncLimit=2
    server.1=zkper-0.zkper:2888:3888:participant
    server.2=zkper-1.zkper:2888:3888:participant
    server.3=zkper-2.zkper:2888:3888:participant

  log4j.properties: |-
    #log4j.rootLogger=INFO, stdout
    #log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    #log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    #log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    ## Suppress connection log messages, three lines per livenessProbe execution
    #log4j.logger.org.apache.zookeeper.server.NIOServerCnxnFactory=WARN
    #log4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN
    zookeeper.root.logger=INFO, CONSOLE
    zookeeper.console.threshold=INFO
    zookeeper.log.dir=.
    zookeeper.log.file=zookeeper.log
    zookeeper.log.threshold=INFO
    zookeeper.log.maxfilesize=256MB
    zookeeper.log.maxbackupindex=20
    zookeeper.tracelog.dir=${zookeeper.log.dir}
    zookeeper.tracelog.file=zookeeper_trace.log
    log4j.rootLogger=${zookeeper.root.logger}
    log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
    log4j.appender.CONSOLE.Threshold=${zookeeper.console.threshold}
    log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
    log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n
    log4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender
    log4j.appender.ROLLINGFILE.Threshold=${zookeeper.log.threshold}
    log4j.appender.ROLLINGFILE.File=${zookeeper.log.dir}/${zookeeper.log.file}
    log4j.appender.ROLLINGFILE.MaxFileSize=${zookeeper.log.maxfilesize}
    log4j.appender.ROLLINGFILE.MaxBackupIndex=${zookeeper.log.maxbackupindex}
    log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout
    log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n
    log4j.appender.TRACEFILE=org.apache.log4j.FileAppender
    log4j.appender.TRACEFILE.Threshold=TRACE
    log4j.appender.TRACEFILE.File=${zookeeper.tracelog.dir}/${zookeeper.tracelog.file}
    log4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout
    log4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L][%x] - %m%n

  configuration.xsl: |-
    <?xml version="1.0"?>
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="html"/>
    <xsl:template match="configuration">
    <html>
    <body>
    <table border="1">
    <tr>
     <td>name</td>
     <td>value</td>
     <td>description</td>
    </tr>
    <xsl:for-each select="property">
    <tr>
      <td><a name="{name}"><xsl:value-of select="name"/></a></td>
      <td><xsl:value-of select="value"/></td>
      <td><xsl:value-of select="description"/></td>
    </tr>
    </xsl:for-each>
    </table>
    </body>
    </html>
    </xsl:template>
    </xsl:stylesheet>

---
apiVersion: v1
kind: Service
metadata:
  name: zkper
  namespace: paas
spec:
  ports:
  - port: 2888
    name: peer
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zookeeper
    storage: persistent
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: paas
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zkper
  namespace: paas
spec:
  selector:
    matchLabels:
      app: zookeeper
      storage: persistent
  serviceName: "zkper"
  replicas: 3
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: zookeeper
        storage: persistent
      annotations:
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: init-config
        image: busybox 
        imagePullPolicy: IfNotPresent
        command: ['/bin/sh', '/etc/kafka-configmap/init.sh']
        volumeMounts:
        - name: configmap
          mountPath: /etc/kafka-configmap
        - name: config
          mountPath: /conf
        - name: zk-data
          mountPath: /var/lib/zookeeper/data
      containers:
      - name: zookeeper
        image: zookeeper:3.5.6
        #env:
        #- name: KAFKA_LOG4J_OPTS
        #  value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        #command: #[ "/bin/sh" ]
        #args: [ "-c", "while true; do echo hello; sleep 100;done" ]
        #- /apache-zookeeper-3.5.6-bin/bin/zkServer.sh start
        #- exec ./bin/zkServer.sh start-foreground
        #- /etc/kafka/zookeeper.properties
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        #readinessProbe:
        #  exec:
        #    command:
        #    - /bin/sh
        #    - -c
        #    - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
        volumeMounts:
        - name: config
          mountPath: /conf
        - name: zk-data
          mountPath: /var/lib/zookeeper/data
        - name: zk-log
          mountPath: /var/lib/zookeeper/log
      volumes:
      - name: configmap
        configMap:
          name: zookeeper-config
      - name: config
        emptyDir: {}
      #- name: data
      #  hostPath:
      #    path: /var/lib/zookeeper/data
  volumeClaimTemplates:
  - metadata:
      name: zk-data
    spec:
      accessModes: [ "ReadWriteMany" ]
      #storageClassName: "nfs"
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: zk-log
    spec:
      accessModes: [ "ReadWriteMany" ]
      #storageClassName: "nfs"
      resources:
        requests:
          storage: 10Gi
